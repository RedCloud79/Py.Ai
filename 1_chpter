## 인공지능

인공지능 > 머신러닝 > 딥러닝

* 인공 신경망
- 인공 신경망(ANN) 인간의 중앙 신경계로부터 영감을 얻어 만들어졌다.

*신경망의 구조
- 입력층, 은닉층, 출력층의 구조로 이루어져 있고, 은닉층이 2층 이상일 때 심층 신경망(DNN)이라고 합니다.
- CNN(이미지의 특징을 뽑아내는 인공 신경망과 분류를 위한 인공 신경망)
- RNN(Recurrent Neural Network structure) 반복 신경망

@ 실제로 적용된 응용의 예
● 패턴 인식에 의한 데이터 분류
● 입력 데이터가 일반적인 패턴과 맞지 않았을 때의 이상 감지
● 신호 처리 (신호 거르기, 신호 분리하기, 신호 압축하기)
● 예측과 예보에 유용한 목표 함수 접근(ex. 이 폭풍은 태풍으로 변할 것인가?)
● 얼굴 확인하기
● 음성 인식하기
● 손 글씨 읽기
● 문장 번역하기
● 게임하기 (보드게임이나 카드 게임)
● 자동차나 로봇 제어하기
● 그리고 더많은 것들


* 완전 연결 층 ( fully connected artificial neural network )
- 완전 연결 인공 신경망

# 인공 신경망의 학습 방법
* 지도 학습
- 1. 하나의 입력 데이터를 처리합니다. 2. 출력값을 미리 알려진 결과와 비교합니다. 3. 인공 신경망을 수정합니다.
4. 이 과정을 반복합니다.

* 비지도 학습
- 입력 값을 그대로 기억해 내야 하는 형태의 학습 방법을 비지도 학습이라고 한다.

* 강화 학습
- 시행 착오를 통해 이익이 되는 동작을 취할 확률은 높이고 손해가 되는 동작을 취할 확률을 낮추는 학습.


# 인공 신경 내부 살펴보기
- weight(가중치) = 곱셈 연산이 들어간다.
- sum up(신호의 더하기)
- activate(활성화) = 신호를 조정을 한다. 큰 신호를 줄여서 조절을 한다.

* 활성화 함수( Activation Function )
- Sigmoid
- ReuLu = max(0,x)
- softmax(활성화 함수) = 출력의 모든 합을 '1'로 만들어 낸다.

# 인공 신경 함수 수식
1. 입력 값 x의 집합, 2. 입력값에 대한 가중치(신호 강도) w의 집합, 3. 편향 입력 값 1, 
4. 편향 b, 5 가중치와 편향을 통해 들어오는 이볅 값들의 합. 6. 그 합을 입력으로 받는 활성화 함수 f, 
7. 활성화 함수 f의 출력 out을 나타낸다.


# 가장 간단한 인공 신경망
- 1개의 입력을 받는경우 출력이 1개 : y(출력값) = x(입력값)*w(가중치) + 1(편향 입력 값)*b(편향)


## 딥러닝 7 공식
- 딥러닝 7 공식을 이용하여 딥러닝의 동작 원리를 이해해 봅니다.
순전파, 목표값, 오차, 역전파 오차, 역전파, 학습률과 같은 용어의 이해 해야한다.

* 순전파 = y(예측값) = x(입력값)*w(가중치) + 1*b(편향)
- 입력 노드 1개, 출력 노드 1개, 편향으로 구성된 단일 인공 신경망
ex_1)
x = 2
w = 3
b=1
y=x*w + 1*b
y
결과값 : 7

* 역전파 = wE = yE*x
           bE = yE*1

* 평균 제곱 오차 = E = (y-yT)*(y-yT) / 2
- y는 순전파에 의한 예측값, yT는 목표값 또는 라벨을 나타낸다. 오차, 손실, 비용이라고도 합니다.
ex_2) y값으로 7을 얻었지만, y로 10이 나오게 하려고한다. E(오차값)
yT = 10
E=(y-yT)**2/2
E
결과값 : 4.5

* 역전파 오차 = yE = y - yT
- yE는 역전파 오차, y는 순전파에 의한 예측값, yT는 목표값
ex_3)
yE = y-yT
yE
결과값 : -3

* 입력 역전파 = xE = yE*w
- 오차(yE)를 입력값(xE)로 다시 보낸다. (편향은 무시한다.)

* 가중치, 편향 순전파 = y= x*w + 1*b (제 1공식)
                        y= w*x + b*1 (제 5공식)
- 구현을 위해 사용 하지는 않는다.

*** 가중치, 편향 역전파 = wE = yE*x
                          bE = yE*1
ex_4)
wE=yE*x
bE=yE*1
(wE,bE)
결과값 : (-6, -3)

** 신경망 학습 = w -= lr*wE
                 b -= lr*bE
- lr(learning rate)의 약자로 학습률을 의미한다.

@ 학습률 = 0.01(lr)
- 학습률 값은 0.001로 시작하여 학습이 진행되는 상황에 따라 조금씩 늘이거나 줄여서 사용한다.
ex_5)
lr = 0.01
w = w-lr*wE
b = b-lr*bE
(w,b)
결과값 : (3.06, 1.03)
y = x*w+1*b (제 2의 순전파)
y
결과값 : 7.15


## 반복 학습 수행하기

ex_1) 2회 반복
x = 2
w = 3
b = 1
yT = 10
lr = 0.01

for epoch in range(200):
    y = x*w + 1*b
    E = (y-yT)**2/2
    yE = y-yT
    wE = yE*x
    bE = yE*1
    w -= lr*wE
    b -= lr*bE
    
    print(f'epoch = {epoch}')
    print(f' y :  {y:.3f}')
    print(f' w :  {w:.3f}')
    print(f' b :  {b:.3f}')
    
    if E < 0.0000001 :
        break
    
* 결과값
epoch = 171
 y :  10.000
 w :  4.200
 b :  1.600
epoch = 172
 y :  10.000
 w :  4.200
 b :  1.600


## 딥러닝 확장하기
***** 2입력 1출력 인공 신경 *****
@제 1공식 : y = x1*w1 + x2*w2 + 1*b
ex_1)
x1, x2 = 2,3
w1,w2=3,4
b=1
y = x1*w1 + x2*w2 + b*1
y
결과값 : 19

@제 2공식 : E = (y-yT)**2/2
ex_2)
yT = 27
E = (y-yT)**2/2
E
결과값 : 32.0

@제 3공식 : yE = y - yT
ex_3)
yE = y-yT
yE
결과값 : -8

@제 4공식 : x1E = yE*w1
            x2E = yE*w2

@제 5공식 : y = x1*w1 + x2*w2 + 1*b
            y = w1*x1 + w2*x2 + b*1

@제 6공식 : w1E =yE*x1
            w2E =yE*x2
            bE=yE*1
ex_4)
w1E =yE*x1
w2E =yE*x2
bE=yE*1
(w1E, w2E, bE)
결과값 : (-16, -24, -8)


@제 7공식 : w1 -= lr*w1E
            w2 -= lr*w2E
            b -= lr*bE
ex_5)
lr = 0.01
w1 -= lr*w1E
w2 -= lr*w2E
b -= lr*bE
(w1,w2,b)
결과값 : (3.16, 4.24, 1.08)

## 반복수행하기

ex_1)
x1, x2 = 2,3
w1, w2 = 3, 4
b = 1
yT = 27
lr = 0.01

for epoch in range(2000):
    y = x1*w1 + x2*w2 + 1*b
    E = (y-yT)**2/2
    yE = y-yT
    w1E = yE*x1
    w2E = yE*x2
    bE = yE*1
    w1 -= lr*w1E
    w2 -= lr*w2E
    b -= lr*bE
    
    print(f'epoch = {epoch}')
    print(f' y :  {y:.3f}')
    print(f' w1 :  {w1:.3f}')
    print(f' w2 :  {w2:.3f}')
    print(f' b :  {b:.3f}')
    
    if E < 0.0000001 :
        break
        
* 결과값
epoch = 64
 y :  26.999
 w1 :  4.143
 w2 :  5.714
 b :  1.571
epoch = 65
 y :  27.000
 w1 :  4.143
 w2 :  5.714
 b :  1.571
 

**** 2입력 2출력 인공 *****
@제 1공식 : y1 = x1*w1 + x2*w2 + 1*b1
            y2 = x1*w3 + x2*w4 + 1*b2
ex_1)
x1, x2 = 2,3
w1, w2 = 3,4
w3, w4 = 5,6
b1, b2 = 1,2
y1 = x1*w1 + x2*w2 + 1*b1
y2 = x1*w3 + x2*w4 + 1*b2
(y1,y2)
결과값 : (19, 30)

@제 2공식 : E = (y1-y1T)**2/2 + (y2-y2T)**2/2
ex_2)
y1T,y2T=27,-30
E = (y1-y1T)**2/2 + (y2-y2T)**2/2
E
결과값 : 1832.0

@제 3공식 : y1E = y1 - y1T
            y2E = y2 - y2T
ex_3)
y1E = y1 - y1T
y2E = y2 - y2T
(y1E,y2E)
결과값 : (-8, 60)

@제 4공식 : x1E = y1E*w1 + y2E*w3
            x2E = y1E*w2 + y2E*w4

@제 5공식 : y1 = x1*w1 + x2*w2 + 1*b1
            y2 = x1*w3 + x2*w4 + 1*b2
            y1 = w1*x1 + w2*x2 + b1*1
            y2 = w3*x1 + w4*x2 + b2*1

@제 6공식 : w1E = y1E*x1 w3E = y2E*x1
            w2E = y1E*x2 w4E = y2E*x2
            b1E = y1E*1 b2E = y2E*1
ex_4)
w1E = y1E*x1
w2E = y1E*x2
w3E = y2E*x1
w4E = y2E*x2
b1E = y1E*1
b2E = y2E*1
(w1E, w2E, b1E)
결과값 : (-16, -24, -8)
(w3E, w4E, b2E)
결과값 : (120, 180, 60)


@제 7공식 : w1 -= lr*w1E
            w2 -= lr*w2E
            b1 -= lr*b1E
            w3 -= lr*w3E
            w4 -= lr*w4E
            b2 -= lr*b2E
ex_5)
lr = 0.01
w1 -= lr*w1E
w2 -= lr*w2E
b1 -= lr*b1E
w3 -= lr*w3E
w4 -= lr*w4E
b2 -= lr*b2E
(w1,w2,b1)
결과값 : (3.16, 4.24, 1.08)
(w3,w4,b2)
결과값 : (3.8, 4.2, 1.4)


## 반복수행하기
x1, x2 = 2, 3
w1, w2 = 3, 4
w3, w4 = 5, 6
b1, b2 = 1, 2
y1T, y2T = 27, -30
lr = 0.01

for epoch in range(2000):
    y1 = x1*w1 + x2*w2 + 1*b1
    y2 = x1*w3 + x2*w4 + 1*b2
    E = ((y1-y1T)**2/2 + (y2-y2T)**2)/2
    y1E = y1 - y1T
    y2E = y2 - y2T
    w1E = y1E*x1
    w3E = y2E*x1
    w2E = y1E*x2
    w4E = y2E*x2
    b1E = y1E*1
    b2E = y2E*1
    w1 -= lr*w1E
    w2 -= lr*w2E
    b1 -= lr*b1E
    w3 -= lr*w3E
    w4 -= lr*w4E
    b2 -= lr*b2E
    
    print(f'epoch = {epoch}')
    print(f' y1 :  {y1:.3f}')
    print(f' y2 :  {y2:.3f}')
    print(f' w1 :  {w1:.3f}')
    print(f' w2 :  {w2:.3f}')
    print(f' b1 :  {b1:.3f}')
    print(f' w3 :  {w3:.3f}')
    print(f' w4 :  {w4:.3f}')
    print(f' b2 :  {b2:.3f}')
    
    if E < 0.0000001 :
        break

* 결과값
epoch = 79
 y1 :  27.000
 y2 :  -30.000
 w1 :  4.143
 w2 :  5.714
 b1 :  1.571
 w3 :  -3.571
 w4 :  -6.857
 b2 :  -2.286


###################################
@@연습문제 1 (2입력 3출력)
x1, x2 = 0.05, 0.10
w1, w2 = 0.15, 0.20
w3, w4 = 0.25, 0.30
w5, w6 = 0.40, 0.55
b1, b2, b3 = 0.35, 0.45, 0.60
y1T, y2T, y3T = 0.01, 0.99, 0.50
lr = 0.01

for epoch in range(2000):
    y1 = x1*w1 + x2*w2 + 1*b1 #1
    y2 = x1*w3 + x2*w4 + 1*b2
    y3 = x1*w5 + x2*w6 + 1*b3
    
    E = ((y1-y1T)**2 + (y2-y2T)**2 + (y3-y3T)**2)/2 #2
    
    y1E = y1 - y1T #3
    y2E = y2 - y2T
    y3E = y3 - y3T
    
    w1E = y1E*x1 #6
    w2E = y1E*x2
    w3E = y2E*x1
    w4E = y2E*x2
    w5E = y3E*x1
    w6E = y3E*x2
    b1E = y1E*1
    b2E = y2E*1
    b3E = y3E*1
    
    w1 -= lr*w1E #7
    w2 -= lr*w2E
    b1 -= lr*b1E
    w3 -= lr*w3E
    w4 -= lr*w4E
    b2 -= lr*b2E
    w5 -= lr*w5E
    w6 -= lr*w6E
    b3 -= lr*b3E
    
    print(f'epoch = {epoch}')
    print(f' y1 :  {y1:.3f}')
    print(f' y2 :  {y2:.3f}')
    print(f' y3 :  {y3:.3f}')
    print(f' w1 :  {w1:.3f}')
    print(f' w2 :  {w2:.3f}')
    print(f' b1 :  {b1:.3f}')
    print(f' w3 :  {w3:.3f}')
    print(f' w4 :  {w4:.3f}')
    print(f' b2 :  {b2:.3f}')
    print(f' w5 :  {w5:.3f}')
    print(f' w6 :  {w6:.3f}')
    print(f' b3 :  {b3:.3f}')
    
    if E < 0.0000001 :
        break
*결과값
epoch = 715
 y1 :  0.010
 y2 :  0.990
 y3 :  0.500
 w1 :  0.132
 w2 :  0.164
 b1 :  -0.013
 w3 :  0.275
 w4 :  0.349
 b2 :  0.941
 w5 :  0.391
 w6 :  0.533
 b3 :  0.427
# 은닉층 역전파 제 4공식
x1E=y1E*w1 + y2E*w3 + y3E*w5
x2E=y1E*w2 + y2E*w4 + y3E*w6


@@연습문제 2번 (3입력2출력)
x1, x2, x3 = 0.02, 0.05, 0.12
w1, w2 = 0.15, 0.20
w3, w4 = 0.02, 0.27
w5, w6 = 0.37, 0.52
b1, b2 = 0.12, 0.39
y1T, y2T = 0.02, 0.98
lr = 0.01

for epoch in range(2000):
    y1 = x1*w1 + x2*w2 + x3*w3 + 1*b1 #1
    y2 = x1*w4 + x2*w5 + x3*w6 + 1*b2
    
    E = ((y1-y1T)**2 + (y2-y2T)**2)/2 #2
    
    y1E = y1 - y1T #3
    y2E = y2 - y2T
    
    w1E = y1E*x1 #6
    w2E = y1E*x2
    w3E = y1E*x3
    w4E = y2E*x1
    w5E = y2E*x2
    w6E = y2E*x3
    b1E = y1E*1
    b2E = y2E*1
    
    w1 -= lr*w1E #7
    w2 -= lr*w2E
    w3 -= lr*w3E
    b1 -= lr*b1E
    w4 -= lr*w4E
    w5 -= lr*w5E
    w6 -= lr*w6E
    b2 -= lr*b2E
    
    print(f'epoch = {epoch}')
    print(f' y1 :  {y1:.3f}')
    print(f' y2 :  {y2:.3f}')
    print(f' w1 :  {w1:.3f}')
    print(f' w2 :  {w2:.3f}')
    print(f' w3 :  {w3:.3f}')
    print(f' b1 :  {b1:.3f}')
    print(f' w4 :  {w4:.3f}')
    print(f' w5 :  {w5:.3f}')
    print(f' w6 :  {w6:.3f}')
    print(f' b2 :  {b2:.3f}')
    
    if E < 0.0000001 :
        break
* 결과값
epoch = 690
 y1 :  0.020
 y2 :  0.980
 w1 :  0.148
 w2 :  0.194
 w3 :  0.006
 b1 :  0.007
 w4 :  0.280
 w5 :  0.395
 w6 :  0.579
 b2 :  0.885
 
# 은닉층 역전파 제 4공식
x1E = y1E*w1 + y2E*w4
x2E = y1E*w2 + y2E*w5
x3E = y1E*w3 + y2E*w6


## 2입력 2은닉 2출력 인공 신경망
- 은닉층이 추가된경우 쪼개어 볼수있다. [2입력 2출력]
@1 순전파
h1 = x1*w1 + x2*w2 + b1
h2 = x1*w3 + x2*w4 + b2
y1 = h1*w5 + h2*w6 + b3
y2 = h1*w7 + h2*w8 + b4

@2 오차
E = (y1-y1T)^2/2 + (y2-y2T)^2/2

@3 역전파 오차
y1E = y1 - y1T
y2E = y2 - y2T

@4 입력 역전파
h1E = y1E*w5 + y2E*w7
h2E = y1E*w6 + y2E*w8

@6 가중치, 편향 역전파
w5E = y1E*h1
w6E = y1E*h2
w7E = y2E*h1
w8E = y2E*h2
b3E = y1E*1
b4E = y2E*1

w1E = h1E*x1
w2E = h1E*x2
w3E = h2E*x1
w4E = h2E*x2
b1E = h1E*1
b2E = h2E*1

#인공 신경망 구현하기
ex_1)
x1, x2 = 0.05, 0.10

w1, w2, w3, w4 = 0.15, 0.20, 0.25, 0.30
b1, b2 = 0.35, 0.35

w5, w6, w7, w8 = 0.40, 0.45, 0.50, 0.55
b3, b4 = 0.60, 0.60

y1T, y2T = 0.01, 0.99

lr = 0.01

for epoch in range(2000):
    h1 = x1*w1 + x2*w2 + 1*b1 #1
    h2 = x1*w3 + x2*w4 + 1*b2
    y1 = h1*w5 + h2*w6 + 1*b3
    y2 = h1*w7 + h2*w8 + 1*b4
    
    E = ((y1-y1T)**2 + (y2-y2T)**2)/2 #2
    
    y1E = y1 - y1T # 3
    y2E = y2 - y2T
    
    h1E = y1E*w5 + y2E*w7 #4
    h2E = y1E*w6 + y2E*w8
    
    w1E = h1E*x1 #6
    w2E = h1E*x2
    w3E = h2E*x1
    w4E = h2E*x2
    w5E = y1E*h1
    w6E = y1E*h2
    w7E = y2E*h1
    w8E = y2E*h2
    b1E = h1E*1
    b2E = h2E*1
    b3E = y1E*1
    b4E = y2E*1
    
    w1 -= lr*w1E #7
    w2 -= lr*w2E
    w3 -= lr*w3E
    w4 -= lr*w4E
    b1 -= lr*b1E
    b2 -= lr*b2E
    
    w5 -= lr*w5E
    w6 -= lr*w6E
    w7 -= lr*w7E
    w8 -= lr*w8E
    b3 -= lr*b3E
    b4 -= lr*b4E
    
    
    if E < 0.0000001 :
        print(f'epoch = {epoch}')
        print(f' y1 :  {y1:.3f}')
        print(f' y2 :  {y2:.3f}')
        break
* 결과값
epoch = 665
 y1 :  0.010
 y2 :  0.990


